author
======
Todd Mueller
firstnamelastname@common.google.mail.domain
https://github.com/microlinux/python-shell

version
=======
Version 1.1_BETA-20130402

history
=======
Version 1.0-20130401 			Initial release
Version 1.1_BETA-20130402	Update to eliminate need for external timeout
                          binary, now uses Threading.Timer()

truth
=====
This program is free software: you can redistribute it and/or modify it
under the terms of the GNU General Public License as published by the Free
Software Foundation, version 3 of the License.

This program is distributed in the hope that it will be useful, but WITHOUT
ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for
more details.

You should have received a copy of the GNU General Public License along
with this program. If not, see <http://www.gnu.org/licenses/>.

This program may contain bugs or do very bad things. I have done fairly
extensive testing, but certainly may not have uncovered all bugs or corner
cases. I am not a professional programmer. Criticisms and fixes welcome.

shell
=====
shell provides two user facing functions that execute shell commands and
return results in a normalized manner. /usr/bin/timeout is required.

command() returns a namedtuple and multi_command() returns a namedtuple
generator:

result.command  <str> command string
result.retval   <int> retval
result.output   <list> output split by line, stripped of vertical and
                       horizontal whitespace

retval = 124 on execution timeout
retval = 127 if command not found or executable
retval = 255 if /usr/bin/timeout not found or executable
retval = 256 on exepction during execution
retval = 257 on execption during output collection

On retval 124, 127 or 255 a standard description is returned. On retval 256 
and 257, output will be format_exc(). 

command(str command, int timeout=10)
====================================
Executes a command with a timeout. Returns the result as a namedtuple.

result = command('whoami', 2)
print result.command
print result.retval
print result.output

multi_command(list commands, int timeout=10, int workers=4)
===========================================================
Executes commands concurrently with individual timeouts in a pool of
workers. Returns ordered results as a namedtuple generator.

results = multi_command(['whoami', 'uptime'], 2)
for result in results:
  print result.command
  print result.retval
  print result.output